import type { NextAuthConfig } from 'next-auth';

export const authConfig = {
  pages: {
    signIn: '/login',
  },
  callbacks: {
    authorized({ auth, request: { nextUrl } }) {
      const isLoggedIn = !!auth?.user;
      const isOnDashboard = nextUrl.pathname.startsWith('/dashboard');
      if (isOnDashboard) {
        if (isLoggedIn) return true;
        return false; // Redirect unauthenticated users to login page(Перенаправить неаутентифицированных пользователей на страницу входа)
      } else if (isLoggedIn) {
        return Response.redirect(new URL('/dashboard', nextUrl));
      }
      return true;
    },
  },
  providers: [], // Add providers with an empty array for now
} satisfies NextAuthConfig;

/**
 * можно использовать эту pages опцию, чтобы указать маршрут для настраиваемых страниц входа, выхода и ошибок. Это не обязательно, но если добавить signIn: '/login'эту pages опцию, пользователь будет перенаправлен на пользовательскую страницу входа, а не на страницу по умолчанию NextAuth.js.
 *
 */

/**
 * оператор двойного отрицания (!!), применяется для преобразования значения в логический тип (boolean). Этот оператор преобразует любое значение в его эквивалентное булевое значение: false, если значение равно null, undefined, 0, NaN, "" (пустая строка) или false, в противном случае - true.
 *
 * оператор опциональной цепочки (?.) Он используется для безопасного доступа к свойствам объекта, когда объект может быть null или undefined. Если auth не определен или равен null, user не будет доступен, и в этом случае isLoggedIn будет false.
 *
 */

//* разбор кода
/**
 * pages: Это объект, который определяет маршруты для различных страниц, связанных с аутентификацией. В данном случае, когда пользователь должен войти в систему (sign in), он будет перенаправлен на страницу /login.
 *
 * callbacks: Это объект, содержащий колбэки (функции обратного вызова), которые выполняются в различных ситуациях в процессе аутентификации. В данном случае только один колбэк - authorized, который вызывается, когда пользователь пытается получить доступ к определенной странице. В этом колбэке происходит проверка, авторизован ли пользователь (isLoggedIn), и находится ли он на странице /dashboard. Если пользователь находится на странице /dashboard и он авторизован, то ему разрешается доступ (return true). Если пользователь не авторизован, он будет перенаправлен на страницу входа (return false). Если пользователь не находится на странице /dashboard и он авторизован, его перенаправят на страницу /dashboard.
 *
 * const isOnDashboard = nextUrl.pathname.startsWith('/dashboard') - проверка, находится ли текущий URL в разделе "dashboard". В данном случае, если nextUrl.pathname начинается с '/dashboard', то переменная isOnDashboard будет установлена в true, в противном случае она будет false.
     Это может быть полезно, например, для определения, нужно ли пользователю авторизовываться перед доступом к определенным страницам, связанным с панелью инструментов или административным интерфейсом.
 * 
 *  const isLoggedIn = !!auth?.user - проверка наличия пользователя в объекте auth.
    - Сначала происходит обращение к свойству user объекта auth.
    - Затем оператор !! преобразует полученное значение в логическое. Если значение существует (не null, не undefined, не false, и не пустая строка), то результат будет true, иначе будет false.
    - Таким образом, переменная isLoggedIn будет равна true, если в объекте auth существует свойство user, и false, если свойство user отсутствует или его значение является ложным.
 *  
 * providers: Это массив, который обычно используется для определения различных поставщиков аутентификации, таких как Google, Facebook, Twitter и т. д. В данном случае массив пустой, поэтому никакие поставщики не указаны.
 *
 *
 *
 *
 */
